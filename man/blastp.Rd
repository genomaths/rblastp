% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/blasp.R
\name{blastp}
\alias{blastp}
\alias{blastp,AAStringSet-method}
\alias{blastp,character-method}
\title{BLASTP programs to search protein subjects using a protein query}
\usage{
blastp(query.seq, ...)

\S4method{blastp}{AAStringSet}(
  query.seq,
  dtb = NULL,
  seq.name = NULL,
  dir.db = NULL,
  db.fa = NULL,
  dir.fa = NULL,
  db.fa.name = NULL,
  tmp = getwd(),
  maxTargetSeqs = 2,
  seq.index = NULL,
  numcode = 1,
  num.cores = 1L,
  tasks = 0L
)

\S4method{blastp}{character}(
  query.seq,
  dtb = NULL,
  seq.name = NULL,
  dir.db = NULL,
  db.fa = NULL,
  dir.fa = NULL,
  db.fa.name = NULL,
  tmp = getwd(),
  maxTargetSeqs = 2,
  seq.index = NULL,
  numcode = 1,
  num.cores = 1L,
  tasks = 0L
)
}
\arguments{
\item{query.seq}{An \code{\link[Biostrings]{AAStringSet-class}} object. 
(\code{link[Biostrings]{XStringSet-class}}) from *Biostrings* package
carrying the query amino acid sequence(s). This obeject can be created 
reading the fasta file of interest with function 
\code{\link[Biostrings]{readDNAStringSet}} from' *Biostrings* package.}

\item{dtb}{whole path to the database of sequences. For example, it would be
dtb = "/Path_to_database/dataBaseName" (do not add any extension after the
"dataBaseName", see details). The database must be created by function
'blastdbcmd', as specified for
\href{https://www.ncbi.nlm.nih.gov/books/NBK279671/}{NCBI} blast. Default is
NULL. If not provided, then function *blasp* will try to create it using the
information provided in parameters *db.fa* and *dir.fa*.}

\item{db.fa, dir.fa}{Name and directory of the file containing the fasta 
sequence(s) to build a ncbi-blast database if dtb = NULL. 'db.fa' 
can be a \code{\link[Biostrings]{AAStringSet-class}} object.}

\item{db.fa.name}{if 'db.fa' is a 
\code{\link[Biostrings]{AAStringSet-class}}, a database will be created. To
create the database the object 'db.fa' will be written as a fasta file in the
'dir.fa' directory with the names 'db.fa.name'. Default is NULL.}

\item{tmp}{A directory where to write a temporal file.}

\item{maxTargetSeqs}{Integer value to pass to blastp. The maximum number of 
sequences to target in the database. Default is 2, i.e., for each query
sequence, the two top sequences from the database with the minimum 
pairwise alignment *evalue* will be returned.}

\item{seq.index}{A numerical vector indicating the subset of sequences 
from the 'query.seq' that should be use in blastp. Default is NULL, i.e., 
all the sequences from 'query.seq' will be subject of 'blastp' searching.}

\item{numcode}{The NCBI genetic code number for translation. By default the
standard genetic code is used.}

\item{num.cores, tasks}{Parameters for parallel computation using
\code{\link[BiocParallel]{BiocParallel-package}}: the number of cores to 
use, i.e. at most how many child processes will be run simultaneously (see
\code{\link[BiocParallel]{bplapply}} and the number of tasks per job (only
for Linux OS).}
}
\description{
This function is a wrapping to use the 
\href{https://www.ncbi.nlm.nih.gov/books/NBK279671/}{NCBI} BLASTP programs
for search protein subjects using a protein query. The function applies the
command line version of the Basic Local Alignment Search Tool (BLAST), as
provided by the \href{https://www.ncbi.nlm.nih.gov/books/NBK279671/}{NCBI}.
The reason why the function is addressed to only BLASTP is because we are
interested only in the codon sequences and, in general, the sequence
alignment based on DNA sequence breaks the codons. The best accuracy is
obtained by translating the codon sequence into amino-acid sequence.
}
\details{
BLAST command line sofware must be previously installed in the 
local computer where this function will be called, as explained at
\href{https://www.ncbi.nlm.nih.gov/books/NBK279671/}{NCBI}. it is worthy to
notice that once created the ncbi-blast database contains six files with the
following structure:
    \itemize{
        \item{dataBaseName.phr}
        \item{dataBaseName.pin}
        \item{dataBaseName.pog}
        \item{ataBaseName.psd}
        \item{dataBaseName.psi}
        \item{dataBaseName.psq}
    }
}
\examples{
#' ## The destination files are in the temporal 'tmp' local folder
dir.create("/tmp/pyroc/")
dir.fa <- "/tmp/pyroc/"
tmp <- dir.fa

## Load AAStringSet-class object carrying the aminoacid sequences 
data(p_furiosus, p_abiss, package = "rblastp")

blastp(query.seq = p_furiosus, db.fa.name = "p_abiss.fa",
       db.fa = p_abiss, dir.fa = dir.fa, tmp = tmp)

## ---- delete 'pyroc' folder -----
unlink(x = "/tmp/pyroc", recursive = TRUE)

\dontrun{
## ============================= For Linux OS ============================
## ---------- Download the amino acid sequence from github ---------------
url1 <- paste0("https://github.com/genomaths/seqalignments/raw/master/",
               "Pyrococcus/pep_seq_all/",
               "Pyrococcus_abyssi_ge5.ASM19593v2.pep.all.fa")
 
url2 <- paste0("https://github.com/genomaths/seqalignments/raw/master/",
               "Pyrococcus/pep_seq_all/Pyrococcus_furiosus_dsm_3638.",
               "ASM730v1.pep.all.fa")
 
## The destination files are in the temporal 'tmp' local folder
dir.create("/tmp/pyroc")
outfile1 <- "/tmp/pyroc/p_abiss.fa"
outfile2 <- "/tmp/pyroc/p_furiosus.fa"
 
download.file(url = url1, destfile = outfile1, method = "wget", quiet=TRUE)
download.file(url = url2, destfile = outfile2, method = "wget", quiet=TRUE)
 
## ---------------- Set the information needed for blastp ----------------
db.fa <- "p_abiss.fa"
dir.fa <- "/tmp/pyroc/"
dir.db <- "/tmp/pyroc/"
tmp <- dir.db
 
file <- "/tmp/pyroc/p_furiosus.fa"
seqs <- readAAStringSet(filepath = file, format = "fasta")
query.seq <- seqs[1:20]
seq.name  <- substr(x = names(query.seq), start = 1, stop = 8)

## Running blastp 
blastp(query.seq=query.seq, dtb = NULL, seq.name = seq.name, db.fa = db.fa,
       dir.fa = dir.fa, tmp = tmp)
 
## ------------------------- delete 'pyroc' folder  --------------------
unlink(x = "/tmp/pyroc", recursive = TRUE)
}
}
\author{
Robersy Sanchez <https://genomaths.com>
}
